'use strict'

import test from 'ava'
import {toSubscript, toSuperscript, emoji, pad} from '..'

test(`Basic digits 123... Рєњ ┬╣┬▓┬│РІЁРІЁРІЁ/РѓЂРѓѓРѓЃ...`, t => {
	t.plan(2)
	t.is(toSubscript('1234567890'), 'РѓЂРѓѓРѓЃРѓёРѓЁРѓєРѓЄРѓѕРѓЅРѓђ')
	t.is(toSuperscript('1234567890'), '┬╣┬▓┬│РЂ┤РЂхРЂХРЂиРЂИРЂ╣РЂ░')
})

test(`Pangram Рєњ рхђ╩░рхЅ/р┤ЏРѓЋРѓЉ`, t => {
	const pangram = 'The quick brown fox jumps over the lazy dog.'
	t.plan(2)
	t.is(toSubscript(pangram), 'р┤ЏРѓЋРѓЉ РѓЊрхцрхбРѓЊРѓќ РѓЊрхБРѓњРѓЊРѓЎ РѓЊРѓњРѓЊ Р▒╝рхцРѓўРѓџРѓЏ РѓњрхЦРѓЉрхБ РѓюРѓЋРѓЉ РѓЌРѓљРѓЊРѓЊ РѓЊРѓњРѓЊ.')
	t.is(toSuperscript(pangram), 'рхђ╩░рхЅ рхЇрхўРЂ▒рХюрхЈ рхЄ╩│рхњ╩иРЂ┐ рХархњ╦Б ╩▓рхўрхљрхќ╦б рхњрхЏрхЅ╩│ рхЌ╩░рхЅ ╦АрхЃрХ╗╩И рхѕрхњрхЇРІЁ')
})

test(`Basic padding 12345/РЌї 10 chars (left pad)`, t => {
	t.is(pad('12345', ' ', 10), '     12345')
})

test(`Basic padding 12345/РЌї -10 chars (right pad)`, t => {
	t.is(pad('12345', ' ', -10), '12345     ')
})

test(`Long arrow padding Рєњ/Рћђ 8 chars`, t => {
	t.is(pad('Рєњ', 'Рћђ', 8), 'РћђРћђРћђРћђРћђРћђРћђРєњ')
})

test(`Emoji Рєњ ­Ъцћ`, t => {
	t.is(emoji('­Ъцћ'), '­Ъцћ ')
})

